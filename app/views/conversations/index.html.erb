<div class="flex flex-col h-full">

  <!-- Top Section: Search Bar -->
  <div class="w-full bg-white shadow-lg p-6 mb-2">
    <h2 class="text-2xl font-bold mb-2">Zacznij nową konwersację</h2>

    <div class="relative">
      <input type="text" id="user-search" placeholder="Wyszukaj użytkownika..." class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring focus:ring-indigo-500 focus:ring-opacity-50">
      <div id="users-list" class="absolute w-full bg-white border border-gray-300 rounded-md mt-1 z-10 overflow-y-auto hidden" style="height: 5cm;"></div>
    </div>
  </div>

  <!-- Bottom Section: Conversations List and Messages Window -->
  <div class="flex flex-1 lg:flex-row">
    <!-- Conversations List -->
    <div class="w-full lg:w-1/3 bg-white shadow-lg h-full overflow-y-auto p-6">
      <h2 class="text-2xl font-bold mb-4">Aktywne konwersacje</h2>
      <% @active_conversations.each do |conversation| %>
        <% if conversation.sender_id == current_user.id %>
          <% recipient = User.find(conversation.recipient_id) %>
        <% else %>
          <% recipient = User.find(conversation.sender_id) %>
        <% end %>
        <div class="flex items-center mb-4">
          <% if recipient.avatar.attached? %>
            <%= image_tag url_for(recipient.avatar), class: 'w-12 h-12 rounded-full mr-4' %>
          <% else %>
            <div class="w-12 h-12 bg-gray-300 rounded-full mr-4 flex items-center justify-center">
              <i class="fas fa-user text-white"></i>
            </div>
          <% end %>

          <div class="flex-1">
            <%= link_to conversation_messages_path(conversation), remote: true, class: "block text-blue-500 hover:text-blue-700 mb-1 font-bold text-lg conversation-link" do %>
              <%= "#{recipient.first_name} #{recipient.last_name}" %>
            <% end %>
            <p class="text-sm text-gray-600">
              <% last_message = conversation.messages.last %>
              <%= last_message ? truncate(last_message.body, length: 50) : "Brak wiadomości" %>
            </p>
          </div>
        </div>
      <% end %>
    </div>

    <!-- Messages Window -->
    <div class="w-full lg:w-2/3 flex-1 overflow-auto" id="messages-window">
      <div id="messages-content">
        <div class="container mx-auto p-4">
          <p class="text-gray-500">Wybierz konwersację, aby zobaczyć wiadomości.</p>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
document.addEventListener("turbo:load", function() {
  const searchInput = document.getElementById('user-search');
  const usersList = document.getElementById('users-list');
  let currentPage = 1;
  let loading = false;
  let hasMoreUsers = true;

  function resetSearchState() {
    if (usersList) {
      usersList.classList.add('hidden');
      searchInput.value = "";
      usersList.innerHTML = "";
      currentPage = 1;
      hasMoreUsers = true;
    }
  }

  if (searchInput) {
    searchInput.addEventListener('keyup', function() {
      const query = searchInput.value.trim();

      if (query) {
        currentPage = 1;
        hasMoreUsers = true;
        if (usersList) {
          usersList.classList.remove('hidden');
        }
        loadUsers(true);
      } else {
        resetSearchState();
      }
    });

    // Close dropdown and clear query when clicking outside
    document.addEventListener('click', function(event) {
      if (!searchInput.contains(event.target) && !usersList.contains(event.target)) {
        resetSearchState();
      }
    });
  }

  function loadUsers(reset = false) {
    if (loading || !hasMoreUsers || !usersList) return;
    loading = true;

    const query = searchInput ? searchInput.value : '';

    fetch(`/search_users?query=${query}&page=${currentPage}`, {
      headers: {
        'X-Requested-With': 'XMLHttpRequest'
      }
    })
    .then(response => response.text())
    .then(html => {
      if (usersList) {
        if (reset) {
          usersList.innerHTML = html;
        } else {
          usersList.insertAdjacentHTML('beforeend', html);
        }

        if (html.includes("Nie znaleziono użytkowników") || html.trim() === "") {
          hasMoreUsers = false;
        } else {
          currentPage += 1;
        }
      }
      loading = false;
    })
    .catch(() => {
      loading = false;
    });
  }

  if (usersList) {
    usersList.addEventListener('scroll', function() {
      if (usersList.scrollTop + usersList.clientHeight >= usersList.scrollHeight) {
        loadUsers();
      }
    });

    // Ensure search is reset when caching page
    document.addEventListener('turbo:before-cache', function() {
      resetSearchState();
    });
  }
});


</script>
